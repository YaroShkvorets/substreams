import { Protobuf } from "as-proto/assembly";
import { {{ $.OutputName}} as {{ $.ProtoOutputName }} } from "./pb/{{ $.GetOutputProtobufPath }}";
{{- if $.HasExampleEntity }}
import { {{ $.ExampleEntity.NameAsEntity }} } from "../generated/schema";
{{- else }}
import { MyEntity } from "../generated/schema";
{{- end }}
import { log } from "@graphprotocol/graph-ts";

export function handleTriggers(bytes: Uint8Array): void {
  const input = Protobuf.decode<{{ $.ProtoOutputName }}>(bytes, {{ $.ProtoOutputName}}.decode);

 log.info("in handleTriggers");

  {{ if $.HasExampleEntity -}}
  for (let i=0; i<{{$.ProtoOutputNameToSnake}}.{{ $.ExampleEntity.NameAsProtoField }}.length; i++) {
    const {{ toLower $.ExampleEntity.Name }} = input.{{ $.ExampleEntity.NameAsProtoField }}[i];
    {{ if $.ExampleEntityHasID }}
    // Create a new {{ toLower $.ExampleEntity.Name }} using {{ $.ExampleEntity.ID}} as ID
    let entity_id: string = ({{ toLower $.ExampleEntity.Name }}.{{$.ExampleEntity.ID }} + i).toString();
    const entity = new {{ $.ExampleEntity.NameAsEntity }}(entity_id);
    entity.count = 1;
    {{ else }}
    // No ID field was found for {{ $.ExampleEntity.Name }}, we are using index as ID
    const entity = new {{ $.ExampleEntity.NameAsEntity }}(i);
    entity.count = 1;
    {{- end }}
    entity.save();
  }

  {{- else}}
  let entity = new MyEntity("1");
  if (MyEntity.load("1") == null) {
    entity.count = 1;
    entity.save();
  } else {
    entity.count += 1
    entity.save()
  }
  {{- end }}
}


